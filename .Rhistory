fc4 <- naive(train, h=17)
accuracy(fc1, test)
accuracy(fc2, test)
accuracy(fc3, test)
accuracy(fc4, test)
autoplot(fc1) +
autolayer(test, series="Test data")
install.packages("yaml")
require(fpp2)
taylor %>% auto.arima()
devtools::install_github("robjhyndman/forecast")
taylor %>% auto.arima()
devtools::install_github("robjhyndman/forecast")
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, messages=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
#rm(list=ls())
library(rmarkdown)
library(fpp2)
# Note that these load as dependencies with the fpp2 package
# so no need to add them here
library(urca)
library(readxl)
library(seasonal)
library(gridExtra)
library(tidyverse)
library(zoo)
library(stringr)
# ?rmarkdown
#just some preliminary analysis
#not sure if this is the best way to import the data
#loading all the data
a_mtot <- read_xlsx("Prisonforecastdata.xlsx", skip=11)%>%
pull("MALE_TOTAL") %>%
ts(start = c(1995,1), end = c(2018,4), frequency =12)
a_ftot <- read_xlsx("Prisonforecastdata.xlsx", skip=11)%>%
pull("FEMALE_TOTAL") %>%
ts(start = c(1995,1), end = c(2018,4), frequency =12)
a_mtot %>% window(start=c(1997,7)) -> a_mtot
a_ftot %>% window(start=c(1997,7)) -> a_ftot
p1 <- a_mtot %>% autoplot(main="Male prisoners",ylab="Total daily averages") + geom_vline(xintercept=2012.58, col="red")
p2 <- a_ftot %>% autoplot(main="Female prisoners",ylab="Total daily averages")+ geom_vline(xintercept=2011.99, col="red")
grid.arrange(p1,p2,nrow=1)
p1 <- a_mtot %>% ggseasonplot(main="Males")
p2 <- a_mtot %>% ggsubseriesplot(main="Males")
p3 <- a_ftot %>% ggseasonplot(main="Females")
p4 <- a_ftot %>% ggsubseriesplot(main="Females")
grid.arrange(p2,p4,nrow=1)
a_mtot %>% auto.arima(approximation = FALSE) -> arima.male.model
arima.male.model %>% residuals() %>% Box.test(lag=24, fitdf=3, type="Lj") -> LB.test.male
# model passes residual checks
a_mtot %>% ggtsdisplay()
a_mtot %>% checkresiduals()
a_mtot %>% ggtsdisplay()
a_mtot %>% diff() %>% ggtsdisplay()
a_mtot %>% diff() %>% ndiffs()
a_mtot %>% diff() %>% nsdiffs()
a10
View(df.male.all)
knitr::opts_chunk$set(echo = FALSE, cache=TRUE, messages=FALSE, warning=FALSE)
# Make sure you have the latest versions of rmarkdown and bookdown installed
#rm(list=ls())
library(rmarkdown)
library(fpp2)
# Note that these load as dependencies with the fpp2 package
# so no need to add them here
library(urca)
library(readxl)
library(seasonal)
library(gridExtra)
library(tidyverse)
library(zoo)
library(stringr)
# ?rmarkdown
#just some preliminary analysis
#not sure if this is the best way to import the data
#loading all the data
a_mtot <- read_xlsx("Prisonforecastdata.xlsx", skip=11)%>%
pull("MALE_TOTAL") %>%
ts(start = c(1995,1), end = c(2018,4), frequency =12)
a_ftot <- read_xlsx("Prisonforecastdata.xlsx", skip=11)%>%
pull("FEMALE_TOTAL") %>%
ts(start = c(1995,1), end = c(2018,4), frequency =12)
a_mtot %>% window(start=c(1997,7)) -> a_mtot
a_ftot %>% window(start=c(1997,7)) -> a_ftot
p1 <- a_mtot %>% autoplot(main="Male prisoners",ylab="Total daily averages") + geom_vline(xintercept=2012.58, col="red")
p2 <- a_ftot %>% autoplot(main="Female prisoners",ylab="Total daily averages")+ geom_vline(xintercept=2011.99, col="red")
grid.arrange(p1,p2,nrow=1)
p1 <- a_mtot %>% ggseasonplot(main="Males")
p2 <- a_mtot %>% ggsubseriesplot(main="Males")
p3 <- a_ftot %>% ggseasonplot(main="Females")
p4 <- a_ftot %>% ggsubseriesplot(main="Females")
grid.arrange(p2,p4,nrow=1)
a_mtot %>% auto.arima(approximation = FALSE) -> arima.male.model
arima.male.model %>% residuals() %>% Box.test(lag=24, fitdf=3, type="Lj") -> LB.test.male
# model passes residual checks
arima.male.model %>% checkresiduals(test = FALSE)
# model passes residual checks
a_ftot %>% auto.arima(approximation = FALSE) -> arima.female.model
arima.female.model %>% residuals() %>% Box.test(lag=24, fitdf=2, type="Lj") -> LB.test.female
# model passes residual checks
arima.female.model%>% checkresiduals(test = FALSE)
# model passes residual checks
a_mtot %>% ets() -> ets.male.model
#a_mtot %>% ets(damped = FALSE) -> ets.male.model
ets.male.model %>% checkresiduals(test=FALSE)
# model passes residual checks
a_ftot %>% ets() -> ets.female.model
ets.female.model %>% checkresiduals(test=FALSE)
# model passes residual checks
arima.male.model %>% forecast(h=12) -> arima.male.fcasts
ets.male.model %>% forecast(h=12) -> ets.male.fcasts
p1 <- autoplot(arima.male.fcasts) + autolayer(ets.male.fcasts, series = paste(ets.male.model),alpha=0.4) +
guides(colour=guide_legend(title="")) + ylab("Total daily averages (male prisoners)")
arima.female.model %>% forecast(h=12) -> arima.female.fcasts
ets.female.model %>% forecast(h=12) -> ets.female.fcasts
p2 <- autoplot(arima.female.fcasts) + autolayer(ets.female.fcasts, series = paste(ets.female.model),alpha=0.4) +
guides(colour=guide_legend(title="")) + ylab("Total daily averages (female prisoners)")
grid.arrange(p1,p2,nrow=2)
arima.male.model %>% forecast(h=60) -> arima.male.fcasts
ets.male.model %>% forecast(h=60) -> ets.male.fcasts
p1 <- autoplot(arima.male.fcasts) + autolayer(ets.male.fcasts, series = paste(ets.male.model),alpha=0.4) +
guides(colour=guide_legend(title="")) + ylab("Total daily averages (male prisoners)") + geom_vline(xintercept = 2020.33)
arima.female.model %>% forecast(h=60) -> arima.female.fcasts
ets.female.model %>% forecast(h=60) -> ets.female.fcasts
p2 <- autoplot(arima.female.fcasts) + autolayer(ets.female.fcasts, series = paste(ets.female.model),alpha=0.4) +
guides(colour=guide_legend(title="")) + ylab("Total daily averages (female prisoners)") + geom_vline(xintercept = 2020.33)
grid.arrange(p1,p2,nrow=2)
# Forecast evaluation using ETS and ARIMA
# etsfc <- function(y,h)
# {
#   ets(y) %>% forecast(h=h)
# }
#
# arimafc <- function(y,h)
# {
#   auto.arima(y) %>% forecast(h=h)
# }
#
# e1 <- tsCV(a_mtot, etsfc, h=12)
# e2 <- tsCV(a_mtot, arimafc, h=12)
# MSE <- cbind(
#   ETS = colMeans(tail(e1^2, -14), na.rm=TRUE),
#   ARIMA = colMeans(tail(e2^2, -14), na.rm=TRUE))
# sqrt(MSE)
# colMeans(sqrt(MSE))
# Setting up the forecast experiment using auto.arima() and ets()
H=12 # max forecast horizon
min_train= 3*12 #length(a_mtot)-13 # making this the smallest training set
# I will change this to 24 - just using this now for debugging purposes
test_length=length(a_mtot)-(min_train+1) # year end of largest test set
# Creating a tibble
df.male <- tibble("Year, Mth" = character(),
"h" = double(),
"meth" = character(),
"method" = character(),
"obs" = double(),
"fcast" = double(),
"u80" = double(),
"l80" = double(),
"u95" = double(),
"l95" = double())
# h=1 # just for debugging purspose
# t=1
for (t in 1:test_length)
library(tidyverse)
mtcars
install.packages("rmarkdown")
install.packages(c("glue", "jsonlite", "mgcv", "survival"), lib="C:/Program Files/R/R-4.1.2/library")
install.packages("rmarkdown")
library(rmarkdown)
gc()
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("evaluate")
install.packages("evaluate", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("htmltools", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("fpp3")
install.packages("rmarkdown")
install.packages("fastmap")
install.packages("fastmap")
install.packages("fastmap", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("knitr", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("xfun", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("yaml", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("binb", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("patchwork", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("gganimate", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("tweenr", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("tinytex", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("fma", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("forecast", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("fracdiff", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("lmtest", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("zoo", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("timeDate", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("tseries", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("quadprog", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("quantmod", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("xts", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("TTR", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("cowtemp", lib="C:/Program Files/R/R-4.1.2/library")
install.packages("fma", lib="C:/Program Files/R/R-4.1.2/library")
library(fpp3)
as_tsibble(fma::cowtemp)
source("setup.R")
library(patchwork)
global_economy <- global_economy %>%
select(Year, Country, GDP, Imports, Exports, Population)
tourism <- tourism %>%
mutate(
State = recode(State,
"Australian Capital Territory" = "ACT",
"New South Wales" = "NSW",
"Northern Territory" = "NT",
"Queensland" = "QLD",
"South Australia" = "SA",
"Tasmania" = "TAS",
"Victoria" = "VIC",
"Western Australia" = "WA"
)
)
fma::cowtemp
install.packages("highr", lib="C:/Program Files/R/R-4.1.2/library")
install.packages(c("class", "foreign", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
install.packages("renv")
renv::status()
renv::status()
install.packages(c("Rcpp", "renv", "rlang", "rmarkdown", "survival", "withr", "xfun"), lib="C:/Program Files/R/R-4.1.2/library")
library(usethis)
edit_r_environ()
library(fpp3)
install.packages(c("assertive.properties", "bookdown", "broom", "callr", "cli", "DBI", "dbplyr", "dplyr", "dtplyr", "evaluate", "forcats", "gert", "ggdist", "ggforce", "ggplot2", "ggraph", "googlesheets4", "graphlayouts", "haven", "hms", "htmltools", "httr", "igraph", "knitr", "modelr", "patchwork", "pdftools", "pillar", "processx", "progressr", "ps", "qpdf", "R.cache", "R.methodsS3", "R.oo", "R.utils", "Rcpp", "RcppArmadillo", "readxl", "reprex", "rlang", "rmarkdown", "rstudioapi", "rvest", "scales", "scholar", "stringr", "tibble", "tidygraph", "tidyverse", "tinytex", "tsibble", "tweenr", "viridisLite", "xfun"))
install.packages(c("cluster", "MASS", "nlme", "survival"), lib="C:/Program Files/R/R-4.2.0/library")
readxl::read_excel("G:/Shared drives/EBS - Leadership Team Drive/Enrolments/2017-2020 unit count_Rob_.xls")
readxl::read_excel("G:/Shared drives/EBS - Leadership Team Drive/Enrolments/2021 S1 and S2 enrolment count.xlsx")
readxl::read_excel("G:/Shared drives/EBS - Leadership Team Drive/Enrolments/2021 S1 and S2 enrolment count.xlsx", sheet=1)
count <- bind_rows(
readxl::read_excel("G:/Shared drives/EBS - Leadership Team Drive/Enrolments/2017-2020 unit count_Rob_.xls"),
readxl::read_excel("G:/Shared drives/EBS - Leadership Team Drive/Enrolments/2021 S1 and S2 enrolment count.xlsx", sheet=1),
readxl::read_excel("G:/Shared drives/EBS - Leadership Team Drive/Enrolments/2021 S1 and S2 enrolment count.xlsx", sheet=2)
)
library(tidyverse)
library(knitr)
count <- bind_rows(
readxl::read_excel("G:/Shared drives/EBS - Leadership Team Drive/Enrolments/2017-2020 unit count_Rob_.xls"),
readxl::read_excel("G:/Shared drives/EBS - Leadership Team Drive/Enrolments/2021 S1 and S2 enrolment count.xlsx", sheet=1),
readxl::read_excel("G:/Shared drives/EBS - Leadership Team Drive/Enrolments/2021 S1 and S2 enrolment count.xlsx", sheet=2)
)
count
View(count)
View(count)
count <- bind_rows(
readxl::read_excel("G:/Shared drives/EBS - Leadership Team Drive/Enrolments/2017-2020 unit count_Rob_.xls"),
readxl::read_excel("G:/Shared drives/EBS - Leadership Team Drive/Enrolments/2021 S1 and S2 enrolment count.xlsx", sheet=1),
readxl::read_excel("G:/Shared drives/EBS - Leadership Team Drive/Enrolments/2021 S1 and S2 enrolment count.xlsx", sheet=2)
) %>%
janitor::clean_names()
count <- bind_rows(
library(tidyverse)
library(tidyverse)
# Read data from Excel file
file <- "G:/Shared drives/EBS - Leadership Team Drive/Workload/Workload2023.xlsx"
# Academic staff list
staff <- read_excel(file, sheet = "staff") %>%
filter(!is.na(Firstname)) %>%
mutate(
# Disambiguate the Robs and Dans by adding first letter of surname
Name = if_else(Firstname %in% c("Rob"), #,"Dan"
paste(Firstname, str_sub(Surname, 1, 1)),
Firstname)
) %>%
filter(Research != "Research") %>%
select(Name, Campus, FTE, Research, Discipline) %>%
filter(Name != "Rob B") %>%
mutate(
# Increase the FTE of the Ed Focused people
FTE=if_else(Name %in% c("Andrew", "Maziar", "Julie", "John"), FTE*2,FTE),
FTE=if_else(Name %in% c("Charanjit", "Joan", "Gerrie"), FTE*1.5,FTE),)
install.packages(c("bit", "bookdown", "broom", "bslib", "callr", "cli", "cpp11", "crayon", "curl", "data.table", "desc", "digest", "distributional", "dplyr", "evaluate", "fable", "feasts", "forecast", "fracdiff", "gargle", "gert", "gganimate", "ggforce", "ggplot2", "ggraph", "ggrepel", "gh", "gitcreds", "graphlayouts", "gtable", "HDInterval", "igraph", "isoband", "jsonlite", "knitr", "latex2exp", "lifecycle", "lubridate", "markdown", "modelr", "openssl", "pbapply", "pdftools", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "qpdf", "R.utils", "RcppArmadillo", "RcppEigen", "readr", "rlang", "rmarkdown", "sass", "slider", "sys", "tidyr", "tidyselect", "timeDate", "tinytex", "tm", "tseries", "tsibble", "tsibbledata", "tweenr", "urca", "vctrs", "vistime", "vroom", "webshot", "xaringan", "xfun", "xts", "yaml", "zip", "zoo"))
install.packages(c("boot", "Matrix"), lib="C:/Program Files/R/R-4.2.2/library")
install.packages(c("bit", "cli", "data.table", "digest", "dplyr", "forecast", "knitr", "lubridate", "purrr", "rlang", "sass", "slider", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "cli", "data.table", "digest", "dplyr", "forecast", "knitr", "lubridate", "purrr", "rlang", "sass", "slider", "vctrs", "xfun", "yaml"))
remove.packages("knitr")
remove.packages("forecast")
remove.packages("xfun")
remove.packages("vctrs")
remove.packages("sass")
remove.packages("data.table")
remove.packages("bit")
remove.packages("slider")
install.packages("forecast")
install.packages("forecast", lib="C:/Program Files/R/R-4.2.2/library")
install.packages("xfun", lib="C:/Program Files/R/R-4.2.2/library")
install.packages("forecast")
install.packages("forecast")
install.packages("xfun")
install.packages("knitr")
library(fpp3)
tourism
tourism <- tsibble::tourism %>%
mutate(State = recode(State,
`New South Wales` = "NSW",
`Northern Territory` = "NT",
`Queensland` = "QLD",
`South Australia` = "SA",
`Tasmania` = "TAS",
`Victoria` = "VIC",
`Western Australia` = "WA"
))
tourism
tourism$Quarter %>% range()
tourism %>% distinct(State)
tourism %>% distinct(Region)
tourism %>% distinct(Purpose)
tourism_hts <- tourism %>%
aggregate_key(State/Region, Trips = sum(Trips))
tourism_hts
tourism
tourism_hts %>% print(1000)
tourism_hts %>% print(100)
tourism_hts %>% print(n=100)
tourism_hts %>% print(n=1000)
tourism_hts %>%
filter(is_aggregated(Region)) %>% # select everything but not Region, i.e., all aggregated series
autoplot(Trips) +
labs(y = "Trips ('000)",
title = "Australian tourism: national total and states") +
facet_wrap(vars(State), scales = "free_y", ncol = 2) +
theme(legend.position = "none")
tourism_hts %>%
filter(State == "NT" | State == "QLD" |
State == "TAS" | State == "VIC", is_aggregated(Region)) %>%
select(-Region) %>%
mutate(State = factor(State, levels=c("QLD","VIC","NT","TAS"))) %>%
gg_season(Trips) +
facet_wrap(vars(State), nrow = 2, scales = "free_y")+
labs(y = "Trips ('000)")
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv") %>%
mutate(Quarter = yearquarter(Date)) %>%
select(-Date) %>%
as_tsibble(key = c(Gender, Legal, State, Indigenous), index = Quarter) %>%
relocate(Quarter) # just relocating Quarter as the first column
install.packages("bit")
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv") %>%
mutate(Quarter = yearquarter(Date)) %>%
select(-Date) %>%
as_tsibble(key = c(Gender, Legal, State, Indigenous), index = Quarter) %>%
relocate(Quarter) # just relocating Quarter as the first column
prison
prison$Quarter %>% range()
prison %>% distinct(State)
prison %>% distinct(Gender)
prison %>% distinct(Legal)
prison %>% distinct(Indigenous)
prison_gts <- prison %>%
aggregate_key(Gender * Legal * State, Count = sum(Count) / 1e3)
prison_gts
tourism_full <- tourism %>%
aggregate_key((State / Region) * Purpose, Trips = sum(Trips))
tourism_full
tourism_full %>% filter(is_aggregated(State),
!is_aggregated(Purpose)) %>%
select(-State,-Region) %>%
mutate(Purpose = factor(Purpose, levels=c("Holiday","Visiting","Business","Other"))) %>%
autoplot(Trips) +
facet_wrap(vars(Purpose), nrow = 2, scales = "free_y")+
labs(y = "Trips ('000)")
tourism_full %>% filter(is_aggregated(State),
!is_aggregated(Purpose)) %>%
select(-State,-Region) %>%
mutate(Purpose = factor(Purpose, levels=c("Holiday","Visiting","Business","Other"))) %>%
gg_season(Trips) +
facet_wrap(vars(Purpose), nrow = 2, scales = "free_y")+
labs(y = "Trips ('000)")
tourism_states <- tourism %>%
aggregate_key(State, Trips = sum(Trips))
tourism_states %>% autoplot(Trips) +
facet_wrap(vars(State), ncol = 2, scales = "free_y")+
labs(y = "Trips ('000)")
tourism_states
fcasts <- tourism_states %>%
model(ets = ETS(Trips)) %>%
reconcile(bu = bottom_up(ets)) %>%
forecast(h=16)
fcasts
fcasts %>%
mutate(.model = factor(.model, levels=c("ets","bu"))) %>%
autoplot(tourism_states, level=NULL) +
facet_wrap(vars(State), ncol = 2, scales = "free_y")
fcasts <- tourism_states %>%
model(base = ETS(Trips)) %>%
reconcile(bu = bottom_up(base),
wls = min_trace(base, method = "wls_struct")) %>%
forecast(h=16)
fcasts %>% autoplot(tourism_states, level=NULL) +
facet_wrap(vars(State), ncol = 2, scales = "free_y")
prison_gts
library(fpp3)
tourism <- tsibble::tourism %>%
mutate(State = recode(State,
`New South Wales` = "NSW",
`Northern Territory` = "NT",
`Queensland` = "QLD",
`South Australia` = "SA",
`Tasmania` = "TAS",
`Victoria` = "VIC",
`Western Australia` = "WA"
))
tourism
tourism %>% distinct(State)
tourism %>% distinct(Region)
tourism %>% distinct(Purpose)
tourism$Quarter %>% range()
tourism_hts <- tourism %>%
aggregate_key(State/Region, Trips = sum(Trips))
tourism_hts
tourism_hts %>%
filter(is_aggregated(Region)) %>% # select everything but not Region, i.e., all aggregated series
autoplot(Trips) +
labs(y = "Trips ('000)",
title = "Australian tourism: national total and states") +
facet_wrap(vars(State), scales = "free_y", ncol = 2) +
theme(legend.position = "none")
tourism_hts %>%
filter(State == "NT" | State == "QLD" |
State == "TAS" | State == "VIC", is_aggregated(Region)) %>%
select(-Region) %>%
mutate(State = factor(State, levels=c("QLD","VIC","NT","TAS"))) %>%
gg_season(Trips) +
facet_wrap(vars(State), nrow = 2, scales = "free_y")+
labs(y = "Trips ('000)")
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv") %>%
mutate(Quarter = yearquarter(Date)) %>%
select(-Date) %>%
as_tsibble(key = c(Gender, Legal, State, Indigenous), index = Quarter) %>%
relocate(Quarter) # just relocating Quarter as the first column
prison
prison_gts <- prison %>%
aggregate_key(Gender * Legal * State, Count = sum(Count) / 1e3)
prison_gts
tourism_full <- tourism %>%
aggregate_key((State / Region) * Purpose, Trips = sum(Trips))
tourism_full
tourism_full %>% filter(is_aggregated(State),
!is_aggregated(Purpose)) %>%
select(-State,-Region) %>%
mutate(Purpose = factor(Purpose, levels=c("Holiday","Visiting","Business","Other"))) %>%
autoplot(Trips) +
facet_wrap(vars(Purpose), nrow = 2, scales = "free_y")+
labs(y = "Trips ('000)")
tourism_full %>% filter(is_aggregated(State),
!is_aggregated(Purpose)) %>%
select(-State,-Region) %>%
mutate(Purpose = factor(Purpose, levels=c("Holiday","Visiting","Business","Other"))) %>%
gg_season(Trips) +
facet_wrap(vars(Purpose), nrow = 2, scales = "free_y")+
labs(y = "Trips ('000)")
tourism_states <- tourism %>%
aggregate_key(State, Trips = sum(Trips))
tourism_states
tourism_states %>% autoplot(Trips) +
facet_wrap(vars(State), ncol = 2, scales = "free_y")+
labs(y = "Trips ('000)")
fcasts <- tourism_states %>%
model(ets = ETS(Trips)) %>%
reconcile(bu = bottom_up(ets)) %>%
forecast(h=16)
fcasts %>%
mutate(.model = factor(.model, levels=c("ets","bu"))) %>%
autoplot(tourism_states, level=NULL) +
facet_wrap(vars(State), ncol = 2, scales = "free_y")
fcasts <- tourism_states %>%
model(base = ETS(Trips)) %>%
reconcile(bu = bottom_up(base),
wls = min_trace(base, method = "wls_struct")) %>%
forecast(h=16)
fcasts %>% autoplot(tourism_states, level=NULL) +
facet_wrap(vars(State), ncol = 2, scales = "free_y")
install.packages("fs")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(fpp3)
install.packages("utf8")
library(fpp3)
setwd("C:/George/github/fpp3_slides")
source("setup.R")
PBS |>
filter(ATC2 == "A10") |>
select(Month, Concession, Type, Cost) |>
summarise(TotalC = sum(Cost)) |>
mutate(Cost = TotalC / 1e6) -> a10
beer <- aus_production |>
select(Quarter, Beer) |>
filter(year(Quarter) >= 1992) +
labs(title = "Australian beer production", y = "Megalitres")
beer <- aus_production |>
select(Quarter, Beer) |>
filter(year(Quarter) >= 1992)
beer |> autoplot(Beer) +
labs(title = "Australian beer production", y = "Megalitres")
beer |> autoplot(Beer) +
labs(title = "Australian beer production", y = "Megalitres")
beer |> autoplot(Beer) + geom_point() +
labs(title = "Australian beer production", y = "Megalitres")
beer <- aus_production |> select(Quarter, Beer) |> filter(year(Quarter) >= 1992) beer |> autoplot(Beer) +
beer <- aus_production |> select(Quarter, Beer) |> filter(year(Quarter) >= 1992)
beer <- aus_production |> select(Quarter, Beer) |> filter(year(Quarter) >= 1992) beer |> autoplot(Beer) +
beer |> autoplot(Beer) +
labs(title = "Australian beer production", y = "Megalitres")
beer <- aus_production |> select(Quarter, Beer) |> filter(year(Quarter) >= 1992)
